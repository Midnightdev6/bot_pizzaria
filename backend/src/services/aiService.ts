import { GoogleGenerativeAI } from "@google/generative-ai";
import { PrismaClient } from "@prisma/client";
import { ConversationContext, AIResponse, MenuItem } from "../types";
import dotenv from "dotenv";

// Garantir que as vari√°veis de ambiente sejam carregadas
dotenv.config();

const prisma = new PrismaClient();

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

export class AIService {
  private systemPrompt = `
VOC√ä √â UM ATENDENTE VIRTUAL DA PIZZARIA "PIZZARIA AI" - SIGA ESTAS REGRAS RIGOROSAMENTE:

üß† COMPREENS√ÉO ANTES DE VENDA:
1. ESCUTE E ENTENDA primeiro o que o cliente est√° dizendo
2. ANALISE se o cliente est√°:
   - Pedindo algo (ex: "quero suco")
   - Rejeitando algo (ex: "n√£o quero suco", "n√£o gosto")
   - Fazendo pergunta (ex: "que sabores t√™m?")
   - Apenas conversando

3. RESPEITE a inten√ß√£o do cliente:
   - Se ele QUER algo ‚Üí ajude com esse item
   - Se ele N√ÉO QUER algo ‚Üí respeite e ofere√ßa alternativa diferente
   - Se rejeitou bebida ‚Üí n√£o insista em bebida, passe para sobremesa ou confirme pedido

üçï REGRAS DE NEG√ìCIO E FLUXO:

1. FLUXO OBRIGAT√ìRIO: Pizza ‚Üí Bebida ‚Üí Sobremesa ‚Üí Finaliza√ß√£o
   - NUNCA volte para uma etapa j√° conclu√≠da
   - SEMPRE respeite a ordem sequencial
   - Quando um item √© escolhido, PASSE para o pr√≥ximo tipo

2. FOCO NO CARD√ÅPIO:
   - APENAS fale sobre itens do nosso card√°pio
   - N√ÉO responda perguntas sobre outros assuntos
   - Redirecione educadamente para nossos produtos

3. VENDA INTELIGENTE (n√£o agressiva):
   - Seja prestativo primeiro, vendedor depois
   - Use a regra: Pizza ‚Üí Bebida ‚Üí Sobremesa ‚Üí Finaliza√ß√£o
   - Se cliente rejeitar uma categoria, pule para pr√≥xima
   - NUNCA insista no que o cliente recusou
   - NUNCA volte para categoria j√° escolhida

4. FINALIZA√á√ÉO DO PEDIDO:
   - Ap√≥s pizza + bebida + (sobremesa OU rejei√ß√£o de sobremesa):
   - Calcular valor total
   - Informar resumo do pedido
   - Perguntar endere√ßo de entrega
   - Informar tempo estimado de 35-45 minutos

5. PROIBI√á√ïES:
   - NUNCA ofere√ßa descontos, promo√ß√µes ou cupons
   - NUNCA negocie pre√ßos
   - NUNCA insista no que foi recusado
   - NUNCA volte para categoria j√° escolhida

6. CARD√ÅPIO FIXO:

üçï PIZZAS:
- Margherita - R$ 35,90
- Calabresa - R$ 38,90  
- Portuguesa - R$ 42,90
- Quatro Queijos - R$ 45,90
- Frango c/ Catupiry - R$ 41,90
- Pepperoni - R$ 44,90

ü•§ BEBIDAS:
- Coca-Cola 350ml - R$ 5,50
- Coca-Cola 2L - R$ 12,90
- Guaran√° Antarctica 350ml - R$ 5,50
- Suco de Laranja 300ml - R$ 8,90
- Suco de Uva 300ml - R$ 8,90
- √Ågua Mineral 500ml - R$ 3,50

üç∞ SOBREMESAS:
- Brownie com Calda - R$ 15,90
- Pudim de Leite Condensado - R$ 12,90
- Tiramis√π - R$ 18,90
- Petit Gateau - R$ 16,90
- Mousse de Maracuj√° - R$ 11,90

7. PERSONALIDADE:
   - Atencioso e compreensivo
   - Respeitoso √†s escolhas do cliente
   - Prestativo sem ser insistente
   - Foque em satisfazer, n√£o apenas vender

SEMPRE RESPONDA EM PORTUGU√äS BRASILEIRO e priorize a satisfa√ß√£o do cliente!
`;

  async processMessage(
    message: string,
    sessionId: string,
    context?: ConversationContext
  ): Promise<AIResponse> {
    try {
      const menuItems: MenuItem[] = await prisma.menuItem.findMany({
        where: { available: true },
        orderBy: [{ category: "asc" }, { name: "asc" }],
      });

      const pizzas = menuItems.filter(
        (item: MenuItem) => item.category === "PIZZA"
      );
      const drinks = menuItems.filter(
        (item: MenuItem) => item.category === "BEBIDA"
      );
      const desserts = menuItems.filter(
        (item: MenuItem) => item.category === "SOBREMESA"
      );

      const currentContext: ConversationContext = context || {
        orderedPizza: false,
        orderedDrink: false,
        orderedDessert: false,
        rejectedDrink: false,
        rejectedDessert: false,
        lastMessages: [],
        customerIntent: "unknown",
        selectedItems: {},
        orderPhase: "pizza",
        orderTotal: 0,
        needsAddress: false,
      };

      currentContext.lastMessages.push(message);
      if (currentContext.lastMessages.length > 5) {
        currentContext.lastMessages = currentContext.lastMessages.slice(-5);
      }

      const lowerMessage = message.toLowerCase();

      // Detectar inten√ß√£o do cliente
      currentContext.customerIntent = this.detectCustomerIntent(lowerMessage);

      // Verificar se √© pergunta espec√≠fica sobre card√°pio
      const menuQuestionType = this.detectMenuQuestion(lowerMessage);

      // Detectar pedidos e itens espec√≠ficos
      if (this.containsPizzaOrder(lowerMessage, pizzas)) {
        currentContext.orderedPizza = true;
        currentContext.orderPhase = "drink";
        const pizzaItem = this.detectSpecificItem(lowerMessage, pizzas);
        if (pizzaItem) {
          currentContext.selectedItems.pizza = pizzaItem.name;
          currentContext.orderTotal += pizzaItem.price;
        }
      }
      if (this.containsDrinkOrder(lowerMessage, drinks)) {
        currentContext.orderedDrink = true;
        currentContext.orderPhase = "dessert";
        const drinkItem = this.detectSpecificItem(lowerMessage, drinks);
        if (drinkItem) {
          currentContext.selectedItems.drink = drinkItem.name;
          currentContext.orderTotal += drinkItem.price;
        }
      }
      if (this.containsDessertOrder(lowerMessage, desserts)) {
        currentContext.orderedDessert = true;
        currentContext.orderPhase = "finalizing";
        const dessertItem = this.detectSpecificItem(lowerMessage, desserts);
        if (dessertItem) {
          currentContext.selectedItems.dessert = dessertItem.name;
          currentContext.orderTotal += dessertItem.price;
        }
      }

      // Detectar rejei√ß√µes e ajustar fase
      if (this.containsRejection(lowerMessage, "drink")) {
        currentContext.rejectedDrink = true;
        if (currentContext.orderPhase === "drink") {
          currentContext.orderPhase = "dessert";
        }
      }
      if (this.containsRejection(lowerMessage, "dessert")) {
        currentContext.rejectedDessert = true;
        currentContext.orderPhase = "finalizing";
      }

      let contextualPrompt = this.systemPrompt;

      contextualPrompt += `\n\nCONTEXTO DA CONVERSA:`;
      contextualPrompt += `\n- Cliente j√° pediu pizza: ${
        currentContext.orderedPizza ? "SIM" : "N√ÉO"
      }`;
      contextualPrompt += `\n- Cliente j√° pediu bebida: ${
        currentContext.orderedDrink ? "SIM" : "N√ÉO"
      }`;
      contextualPrompt += `\n- Cliente j√° pediu sobremesa: ${
        currentContext.orderedDessert ? "SIM" : "N√ÉO"
      }`;
      contextualPrompt += `\n- Cliente REJEITOU bebida: ${
        currentContext.rejectedDrink ? "SIM (N√ÉO ofere√ßa mais bebidas!)" : "N√ÉO"
      }`;
      contextualPrompt += `\n- Cliente REJEITOU sobremesa: ${
        currentContext.rejectedDessert
          ? "SIM (N√ÉO ofere√ßa mais sobremesas!)"
          : "N√ÉO"
      }`;
      contextualPrompt += `\n- Inten√ß√£o atual do cliente: ${currentContext.customerIntent.toUpperCase()}`;

      if (currentContext.lastMessages.length > 1) {
        contextualPrompt += `\n\nMENSAGENS ANTERIORES:`;
        currentContext.lastMessages.slice(-3).forEach((msg, i) => {
          contextualPrompt += `\n${i + 1}. ${msg}`;
        });
      }

      contextualPrompt += `\n- Fase atual do pedido: ${currentContext.orderPhase.toUpperCase()}`;
      if (currentContext.selectedItems.pizza) {
        contextualPrompt += `\n- Pizza escolhida: ${currentContext.selectedItems.pizza}`;
      }
      if (currentContext.selectedItems.drink) {
        contextualPrompt += `\n- Bebida escolhida: ${currentContext.selectedItems.drink}`;
      }
      if (currentContext.selectedItems.dessert) {
        contextualPrompt += `\n- Sobremesa escolhida: ${currentContext.selectedItems.dessert}`;
      }
      contextualPrompt += `\n- Total atual: R$ ${currentContext.orderTotal.toFixed(
        2
      )}`;

      contextualPrompt += `\n\nESTRAT√âGIA DE RESPOSTA:`;

      // PRIORIDADE M√ÅXIMA: Se √© pergunta sobre card√°pio, responder com lista formatada
      if (
        currentContext.customerIntent === "menu_question" &&
        menuQuestionType
      ) {
        contextualPrompt += `\n\nüö® ATEN√á√ÉO ESPECIAL: Cliente est√° perguntando sobre ${menuQuestionType.toUpperCase()}!`;
        contextualPrompt += `\n- RESPONDA IMEDIATAMENTE com uma LISTA FORMATADA e ORGANIZADA`;
        contextualPrompt += `\n- Use emojis e formata√ß√£o markdown para deixar visualmente atrativo`;
        contextualPrompt += `\n- Inclua nome e pre√ßo de cada item`;
        contextualPrompt += `\n- N√ÉO fa√ßa perguntas adicionais, apenas apresente a lista solicitada`;

        if (menuQuestionType === "pizzas") {
          contextualPrompt += `\n- RESPONDA com lista completa de PIZZAS no formato:`;
          contextualPrompt += `\n  üçï **PIZZAS DISPON√çVEIS:**\n  ‚Ä¢ Nome - R$ XX,XX`;
        } else if (menuQuestionType === "drinks") {
          contextualPrompt += `\n- RESPONDA com lista completa de BEBIDAS no formato:`;
          contextualPrompt += `\n  ü•§ **BEBIDAS DISPON√çVEIS:**\n  ‚Ä¢ Nome - R$ XX,XX`;
        } else if (menuQuestionType === "desserts") {
          contextualPrompt += `\n- RESPONDA com lista completa de SOBREMESAS no formato:`;
          contextualPrompt += `\n  üç∞ **SOBREMESAS DISPON√çVEIS:**\n  ‚Ä¢ Nome - R$ XX,XX`;
        } else if (menuQuestionType === "all") {
          contextualPrompt += `\n- RESPONDA com card√°pio COMPLETO organizado por categorias`;
        }
        contextualPrompt += `\n- Ap√≥s a lista, pergunte qual item desperta mais interesse`;
      } else if (currentContext.customerIntent === "rejecting") {
        contextualPrompt += `\n- ATEN√á√ÉO: Cliente est√° REJEITANDO algo. Seja respeitoso e mude de categoria!`;
      } else {
        // Estrat√©gia baseada na fase do pedido
        switch (currentContext.orderPhase) {
          case "pizza":
            contextualPrompt += `\n- PRIORIDADE: Vender pizza (foque nas mais populares: Calabresa, Margherita, Frango c/ Catupiry)`;
            break;
          case "drink":
            contextualPrompt += `\n- PRIORIDADE: Oferecer bebida para acompanhar a pizza`;
            contextualPrompt += `\n- NUNCA volte para oferecer pizza novamente`;
            break;
          case "dessert":
            contextualPrompt += `\n- PRIORIDADE: Oferecer sobremesa para finalizar`;
            contextualPrompt += `\n- NUNCA volte para pizza ou bebida`;
            break;
          case "finalizing":
            contextualPrompt += `\n- PRIORIDADE: FINALIZAR O PEDIDO`;
            contextualPrompt += `\n- Informar resumo do pedido com total`;
            contextualPrompt += `\n- Perguntar endere√ßo de entrega`;
            contextualPrompt += `\n- Informar tempo estimado de 35-45 minutos`;
            contextualPrompt += `\n- NUNCA ofere√ßa mais itens, apenas finalize`;
            break;
          case "completed":
            contextualPrompt += `\n- Pedido finalizado. Agradecer e confirmar entrega`;
            break;
        }
      }

      contextualPrompt += `\n\nMENSAGEM DO CLIENTE: "${message}"`;
      contextualPrompt += `\n\nRESPONDA seguindo as regras e estrat√©gia acima:`;

      const result = await model.generateContent(contextualPrompt);
      const response = await result.response;
      const aiMessage = response.text();

      const suggestedProducts = this.generateSuggestions(
        currentContext,
        pizzas,
        drinks,
        desserts
      );

      return {
        message: aiMessage,
        suggestedProducts,
        context: currentContext,
      };
    } catch (error) {
      console.error("Erro na IA:", error);

      return {
        message:
          "Desculpe, tive um problema t√©cnico. Mas posso te ajudar! Que tal experimentar nossa pizza Calabresa? √â uma das mais pedidas! üçï",
        suggestedProducts: ["Calabresa", "Margherita", "Coca-Cola"],
        context: context || {
          orderedPizza: false,
          orderedDrink: false,
          orderedDessert: false,
          rejectedDrink: false,
          rejectedDessert: false,
          lastMessages: [message],
          customerIntent: "unknown",
          selectedItems: {},
          orderPhase: "pizza",
          orderTotal: 0,
          needsAddress: false,
        },
      };
    }
  }

  private containsPizzaOrder(message: string, pizzas: MenuItem[]): boolean {
    const lowerMessage = message.toLowerCase();

    // Palavras que indicam nega√ß√£o - se presentes, n√£o √© um pedido
    const negativeWords = [
      "n√£o",
      "nao",
      "nunca",
      "jamais",
      "recuso",
      "dispenso",
      "sem",
    ];
    if (negativeWords.some((word) => lowerMessage.includes(word))) {
      return false;
    }

    const positiveKeywords = [
      "quero",
      "gostaria",
      "vou levar",
      "pode ser",
      "vou querer",
      "me d√°",
      "aceito",
      "sim",
      "ok",
      "beleza",
      "fechado",
    ];
    const pizzaNames = pizzas.map((p) => p.name.toLowerCase());
    const pizzaWords = ["pizza"];

    // Verifica se h√° inten√ß√£o positiva + men√ß√£o a pizza
    const hasPositiveIntent = positiveKeywords.some((keyword) =>
      lowerMessage.includes(keyword)
    );
    const mentionsPizza =
      pizzaWords.some((word) => lowerMessage.includes(word)) ||
      pizzaNames.some((name) => lowerMessage.includes(name));

    return hasPositiveIntent && mentionsPizza;
  }

  private containsDrinkOrder(message: string, drinks: MenuItem[]): boolean {
    const lowerMessage = message.toLowerCase();

    // Palavras que indicam nega√ß√£o
    const negativeWords = [
      "n√£o",
      "nao",
      "nunca",
      "jamais",
      "recuso",
      "dispenso",
      "sem",
    ];
    if (negativeWords.some((word) => lowerMessage.includes(word))) {
      return false;
    }

    const positiveKeywords = [
      "quero",
      "gostaria",
      "vou levar",
      "pode ser",
      "vou querer",
      "me d√°",
      "aceito",
      "sim",
      "ok",
      "beleza",
      "fechado",
    ];
    const drinkKeywords = [
      "coca",
      "guaran√°",
      "suco",
      "√°gua",
      "bebida",
      "refrigerante",
    ];
    const drinkNames = drinks.map((d) => d.name.toLowerCase());

    const hasPositiveIntent = positiveKeywords.some((keyword) =>
      lowerMessage.includes(keyword)
    );
    const mentionsDrink =
      drinkKeywords.some((keyword) => lowerMessage.includes(keyword)) ||
      drinkNames.some((name) => lowerMessage.includes(name));

    return hasPositiveIntent && mentionsDrink;
  }

  private containsDessertOrder(message: string, desserts: MenuItem[]): boolean {
    const lowerMessage = message.toLowerCase();

    // Palavras que indicam nega√ß√£o
    const negativeWords = [
      "n√£o",
      "nao",
      "nunca",
      "jamais",
      "recuso",
      "dispenso",
      "sem",
    ];
    if (negativeWords.some((word) => lowerMessage.includes(word))) {
      return false;
    }

    const positiveKeywords = [
      "quero",
      "gostaria",
      "vou levar",
      "pode ser",
      "vou querer",
      "me d√°",
      "aceito",
      "sim",
      "ok",
      "beleza",
      "fechado",
    ];
    const dessertKeywords = [
      "brownie",
      "pudim",
      "mousse",
      "sobremesa",
      "doce",
      "tiramis√π",
      "petit",
    ];
    const dessertNames = desserts.map((d) => d.name.toLowerCase());

    const hasPositiveIntent = positiveKeywords.some((keyword) =>
      lowerMessage.includes(keyword)
    );
    const mentionsDessert =
      dessertKeywords.some((keyword) => lowerMessage.includes(keyword)) ||
      dessertNames.some((name) => lowerMessage.includes(name));

    return hasPositiveIntent && mentionsDessert;
  }

  // Detectar item espec√≠fico mencionado na mensagem
  private detectSpecificItem(
    message: string,
    items: MenuItem[]
  ): MenuItem | null {
    const lowerMessage = message.toLowerCase();

    // Procurar por nomes exatos de itens
    for (const item of items) {
      const itemNameLower = item.name.toLowerCase();
      if (lowerMessage.includes(itemNameLower)) {
        return item;
      }

      // Verificar palavras-chave espec√≠ficas para cada item
      if (item.name.includes("Calabresa") && lowerMessage.includes("calabresa"))
        return item;
      if (
        item.name.includes("Margherita") &&
        lowerMessage.includes("margherita")
      )
        return item;
      if (
        item.name.includes("Portuguesa") &&
        lowerMessage.includes("portuguesa")
      )
        return item;
      if (
        item.name.includes("Quatro Queijos") &&
        (lowerMessage.includes("quatro queijos") ||
          lowerMessage.includes("4 queijos"))
      )
        return item;
      if (
        item.name.includes("Frango") &&
        (lowerMessage.includes("frango") || lowerMessage.includes("catupiry"))
      )
        return item;
      if (item.name.includes("Pepperoni") && lowerMessage.includes("pepperoni"))
        return item;
      if (item.name.includes("Coca-Cola") && lowerMessage.includes("coca"))
        return item;
      if (item.name.includes("Guaran√°") && lowerMessage.includes("guaran√°"))
        return item;
      if (
        item.name.includes("Suco de Laranja") &&
        lowerMessage.includes("laranja")
      )
        return item;
      if (item.name.includes("Suco de Uva") && lowerMessage.includes("uva"))
        return item;
      if (item.name.includes("√Ågua") && lowerMessage.includes("√°gua"))
        return item;
      if (item.name.includes("Brownie") && lowerMessage.includes("brownie"))
        return item;
      if (item.name.includes("Pudim") && lowerMessage.includes("pudim"))
        return item;
      if (item.name.includes("Tiramis√π") && lowerMessage.includes("tiramis√π"))
        return item;
      if (
        item.name.includes("Petit Gateau") &&
        (lowerMessage.includes("petit") || lowerMessage.includes("gateau"))
      )
        return item;
      if (item.name.includes("Mousse") && lowerMessage.includes("mousse"))
        return item;
    }

    // Se n√£o encontrou item espec√≠fico, retorna o primeiro da categoria (padr√£o)
    return items.length > 0 ? items[0] : null;
  }

  // Nova fun√ß√£o para detectar rejei√ß√µes
  private containsRejection(message: string, category: string): boolean {
    const lowerMessage = message.toLowerCase();
    const negativeWords = [
      "n√£o",
      "nao",
      "nunca",
      "jamais",
      "recuso",
      "dispenso",
      "sem",
      "obrigado",
    ];

    const categoryWords: { [key: string]: string[] } = {
      drink: ["bebida", "suco", "refrigerante", "coca", "guaran√°", "√°gua"],
      dessert: ["sobremesa", "doce", "brownie", "pudim", "mousse"],
      pizza: ["pizza"],
    };

    const hasNegation = negativeWords.some((word) =>
      lowerMessage.includes(word)
    );
    const mentionsCategory =
      categoryWords[category]?.some((word) => lowerMessage.includes(word)) ||
      false;

    return (
      hasNegation && (mentionsCategory || lowerMessage.includes("obrigado"))
    );
  }

  // Detectar se cliente est√° perguntando sobre card√°pio espec√≠fico
  private detectMenuQuestion(
    message: string
  ): "pizzas" | "drinks" | "desserts" | "all" | null {
    const lowerMessage = message.toLowerCase();

    // Palavras que indicam pergunta sobre card√°pio
    const menuQuestionIndicators = [
      "que",
      "qual",
      "quais",
      "tem",
      "t√™m",
      "temos",
      "voc√™s t√™m",
      "sabores",
      "op√ß√µes",
      "opcoes",
      "lista",
      "card√°pio",
      "menu",
      "dispon√≠vel",
      "disponivel",
    ];

    const isMenuQuestion = menuQuestionIndicators.some((word) =>
      lowerMessage.includes(word)
    );
    if (!isMenuQuestion) return null;

    // Espec√≠fico para pizzas
    const pizzaWords = ["pizza", "sabor", "sabores", "massa"];
    if (pizzaWords.some((word) => lowerMessage.includes(word))) {
      return "pizzas";
    }

    // Espec√≠fico para bebidas
    const drinkWords = [
      "bebida",
      "bebidas",
      "suco",
      "sucos",
      "refrigerante",
      "beber",
      "tomar",
    ];
    if (drinkWords.some((word) => lowerMessage.includes(word))) {
      return "drinks";
    }

    // Espec√≠fico para sobremesas
    const dessertWords = ["sobremesa", "sobremesas", "doce", "doces", "a√ßucar"];
    if (dessertWords.some((word) => lowerMessage.includes(word))) {
      return "desserts";
    }

    // Se menciona "todas", "tudo", "completo" = card√°pio completo
    const allWords = [
      "todas",
      "todos",
      "tudo",
      "completo",
      "completa",
      "tudo que",
    ];
    if (allWords.some((word) => lowerMessage.includes(word))) {
      return "all";
    }

    // Se √© pergunta sobre card√°pio mas n√£o especifica categoria, assume pizzas (principal)
    return "pizzas";
  }

  // Detectar inten√ß√£o do cliente
  private detectCustomerIntent(
    message: string
  ):
    | "ordering"
    | "asking"
    | "rejecting"
    | "greeting"
    | "menu_question"
    | "unknown" {
    const lowerMessage = message.toLowerCase();

    // Palavras de cumprimento
    const greetingWords = [
      "oi",
      "ol√°",
      "bom dia",
      "boa tarde",
      "boa noite",
      "hello",
    ];
    if (greetingWords.some((word) => lowerMessage.includes(word))) {
      return "greeting";
    }

    // Palavras de rejei√ß√£o
    const rejectionWords = ["n√£o", "nao", "nunca", "obrigado", "dispenso"];
    if (rejectionWords.some((word) => lowerMessage.includes(word))) {
      return "rejecting";
    }

    // Verificar se √© pergunta espec√≠fica sobre card√°pio
    if (this.detectMenuQuestion(message) !== null) {
      return "menu_question";
    }

    // Palavras de pergunta
    const questionWords = [
      "que",
      "qual",
      "como",
      "quanto",
      "onde",
      "?",
      "tem",
      "t√™m",
    ];
    if (questionWords.some((word) => lowerMessage.includes(word))) {
      return "asking";
    }

    // Palavras de pedido
    const orderWords = [
      "quero",
      "gostaria",
      "vou levar",
      "pode ser",
      "aceito",
      "sim",
    ];
    if (orderWords.some((word) => lowerMessage.includes(word))) {
      return "ordering";
    }

    return "unknown";
  }

  // IA SIMULADA INTELIGENTE
  private generateIntelligentResponse(
    message: string,
    context: ConversationContext,
    pizzas: MenuItem[],
    drinks: MenuItem[],
    desserts: MenuItem[]
  ): string {
    const lowerMessage = message.toLowerCase();

    // Respostas baseadas na inten√ß√£o detectada e contexto
    switch (context.customerIntent) {
      case "greeting":
        return "Ol√°! Bem-vindo √† Pizzaria AI! üçï Sou seu atendente virtual especializado. Que tal come√ßar com uma deliciosa pizza? Temos Calabresa, Margherita, Portuguesa e muito mais!";

      case "asking":
        if (lowerMessage.includes("sabor") || lowerMessage.includes("pizza")) {
          return `Temos deliciosas op√ß√µes de pizzas:\n\nüçï **PIZZAS DISPON√çVEIS:**\n‚Ä¢ Margherita - R$ 35,90\n‚Ä¢ Calabresa - R$ 38,90\n‚Ä¢ Portuguesa - R$ 42,90\n‚Ä¢ Quatro Queijos - R$ 45,90\n‚Ä¢ Frango c/ Catupiry - R$ 41,90\n‚Ä¢ Pepperoni - R$ 44,90\n\nQual desperta seu interesse?`;
        }
        if (lowerMessage.includes("bebida") || lowerMessage.includes("suco")) {
          return `Temos √≥timas bebidas para acompanhar:\n\nü•§ **BEBIDAS:**\n‚Ä¢ Coca-Cola 350ml - R$ 5,50\n‚Ä¢ Guaran√° Antarctica 350ml - R$ 5,50\n‚Ä¢ Suco de Laranja 300ml - R$ 8,90\n‚Ä¢ Suco de Uva 300ml - R$ 8,90\n‚Ä¢ √Ågua Mineral 500ml - R$ 3,50\n\nQual voc√™ gostaria?`;
        }
        return "Posso te ajudar com nosso card√°pio! Temos pizzas deliciosas, bebidas refrescantes e sobremesas irresist√≠veis. O que voc√™ gostaria de saber?";

      case "rejecting":
        if (context.rejectedDrink && !context.orderedDessert) {
          return "Sem problemas! Que tal uma sobremesa para finalizar? Temos Brownie com Calda (R$ 15,90), Pudim de Leite Condensado (R$ 12,90) ou Tiramis√π (R$ 18,90).";
        }
        if (context.rejectedDessert) {
          return "Perfeito! Ent√£o vamos finalizar seu pedido. Voc√™ escolheu uma √≥tima combina√ß√£o! Posso confirmar seu pedido?";
        }
        return "Tudo bem! Cada pessoa tem suas prefer√™ncias. O que posso oferecer que seria do seu interesse?";

      case "ordering":
        if (!context.orderedPizza) {
          return "Excelente escolha! Nossa pizza √© preparada com ingredientes frescos e massa artesanal. Para acompanhar, que tal uma bebida gelada? Temos Coca-Cola, Guaran√° ou sucos naturais!";
        }
        if (!context.orderedDrink && !context.rejectedDrink) {
          return "Perfeita combina√ß√£o! Para acompanhar sua pizza, recomendo uma Coca-Cola gelada ou um de nossos sucos naturais. O que acha?";
        }
        if (!context.orderedDessert && !context.rejectedDessert) {
          return "√ìtima pedida! Para finalizar com chave de ouro, que tal nossa sobremesa especial? O Brownie com Calda √© irresist√≠vel!";
        }
        return "Perfeito! Seu pedido est√° ficando delicioso. Mais alguma coisa que posso adicionar?";

      default:
        if (!context.orderedPizza) {
          return "Que tal come√ßar com uma de nossas pizzas mais populares? A Calabresa √© um cl√°ssico que todo mundo adora, ou a Margherita para quem gosta de sabores tradicionais!";
        }
        if (!context.orderedDrink && !context.rejectedDrink) {
          return "Sua pizza est√° garantida! Para acompanhar, posso sugerir uma bebida? Uma Coca-Cola gelada combina perfeitamente!";
        }
        if (!context.orderedDessert && !context.rejectedDessert) {
          return "Que tal finalizar com uma sobremesa? Nosso Pudim de Leite Condensado √© a pedida perfeita para encerrar sua refei√ß√£o!";
        }
        return "Seu pedido est√° completo! Foi um prazer atend√™-lo. Sua pizza chegar√° quentinha e deliciosa em breve! üçï";
    }
  }

  private generateSuggestions(
    context: ConversationContext,
    pizzas: MenuItem[],
    drinks: MenuItem[],
    desserts: MenuItem[]
  ): string[] {
    const suggestions: string[] = [];

    if (!context.orderedPizza) {
      suggestions.push("Calabresa", "Margherita", "Quatro Queijos");
    } else if (!context.orderedDrink && !context.rejectedDrink) {
      suggestions.push("Coca-Cola", "Guaran√°", "Suco de Laranja");
    } else if (!context.orderedDessert && !context.rejectedDessert) {
      suggestions.push("Brownie", "Pudim", "Mousse de Maracuj√°");
    } else {
      // Se tudo foi pedido ou rejeitado, sugira mais pizzas ou finalize
      if (!context.rejectedDrink && !context.rejectedDessert) {
        suggestions.push("Portuguesa", "Pepperoni", "Frango c/ Catupiry");
      } else {
        suggestions.push("Pedido Confirmado", "Finalizar", "Obrigado");
      }
    }

    return suggestions.slice(0, 3); // M√°ximo 3 sugest√µes
  }
}

export const aiService = new AIService();
