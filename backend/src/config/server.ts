import dotenv from "dotenv";

// Carregar vari√°veis de ambiente
dotenv.config();

export const serverConfig = {
  port: process.env.PORT || 3001,
  nodeEnv: process.env.NODE_ENV || "development",
  frontendUrl: process.env.FRONTEND_URL || "http://localhost:3000",
  geminiApiKey: process.env.GEMINI_API_KEY,
};

/**
 * Fun√ß√£o para exibir informa√ß√µes do servidor no startup
 */
export function logServerInfo(port: string | number) {
  console.log("\nüöÄ Servidor iniciado com sucesso!");
  console.log(`üìç Servidor rodando em: http://localhost:${port}`);
  console.log(`üîó Frontend URL: ${serverConfig.frontendUrl}`);
  console.log(`üìù Modo: ${serverConfig.nodeEnv}`);
  console.log(
    `ü§ñ IA: Google Gemini AI ${serverConfig.geminiApiKey ? "‚úÖ" : "‚ùå"}`
  );
  console.log("\nüìã Endpoints dispon√≠veis:");
  console.log(`   GET  / - Informa√ß√µes da API`);
  console.log(`   GET  /health - Status do servidor`);
  console.log(`   POST /api/messages - Enviar mensagem para IA REAL`);
  console.log(`   GET  /api/messages - Buscar hist√≥rico de mensagens`);
  console.log(`   GET  /api/menu - Buscar card√°pio completo`);
  console.log(`   GET  /api/menu/pizzas - Buscar apenas pizzas`);
  console.log(`   GET  /api/menu/drinks - Buscar apenas bebidas`);
  console.log(`   GET  /api/menu/desserts - Buscar apenas sobremesas\n`);

  if (!serverConfig.geminiApiKey) {
    console.log("‚ö†Ô∏è  AVISO: GEMINI_API_KEY n√£o encontrada no .env");
  }
}
